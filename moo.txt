const int32_t nMagicDivisor = nMagicBonus + 100;
int32_t nUniqueBase = (pItemRatioTxtRecord->dwUnique - nLevelDiff / pItemRatioTxtRecord->dwUniqueDivisor) << 7;
if (nMagicBonus != 0)
{
    const int32_t nDivisor = nMagicDivisor > 110 ? 50 * (5 * nMagicDivisor - 500) / (nMagicDivisor + 150) + 100 : nMagicDivisor;
    if (nDivisor)
    {
        nUniqueBase = 12800 * (pItemRatioTxtRecord->dwUnique - nLevelDiff / pItemRatioTxtRecord->dwUniqueDivisor) / nDivisor;
    }
}

nUniqueBase = std::max(nUniqueBase, pItemRatioTxtRecord->dwUniqueMin);

const int32_t nUniqueChance = nUniqueBase - nUniqueBase * tcArray[nCounter].nUnique / 1024;
if (nUniqueChance <= 0 || ITEMS_RollLimitedRandomNumber(&pMonster->pSeed, nUniqueChance) < 128)
{
    nItemQuality = ITEMQUAL_UNIQUE;
}


int32_t nSetBase = (pItemRatioTxtRecord->dwSet - nLevelDiff / pItemRatioTxtRecord->dwSetDivisor) << 7;
if (nMagicBonus != 0)
{
    const int32_t nDivisor = nMagicDivisor > 110 ? 100 * (5 * nMagicDivisor - 500) / (nMagicDivisor + 400) + 100 : nMagicDivisor;
    if (nDivisor)
    {
        nSetBase = 12800 * (pItemRatioTxtRecord->dwSet - nLevelDiff / pItemRatioTxtRecord->dwSetDivisor) / nDivisor;
    }
}

nSetBase = std::max(nSetBase, pItemRatioTxtRecord->dwSetMin);

const int32_t nSetChance = nSetBase - nSetBase * tcArray[nCounter].nSet / 1024;
if (nSetChance <= 0 || ITEMS_RollLimitedRandomNumber(&pMonster->pSeed, nSetChance) < 128)
{
    nItemQuality = ITEMQUAL_SET;
}


if (pItemTypesTxtRecord->nRare)
{
    int32_t nRareBase = (pItemRatioTxtRecord->dwRare - nLevelDiff / pItemRatioTxtRecord->dwRareDivisor) << 7;
    if (nMagicBonus != 0)
    {
        const int32_t nDivisor = nMagicDivisor > 110 ? 200 * (3 * nMagicDivisor - 300) / (nMagicDivisor + 500) + 100 : nMagicDivisor;
        if (nDivisor)
        {
            nRareBase = 12800 * (pItemRatioTxtRecord->dwRare - nLevelDiff / pItemRatioTxtRecord->dwRareDivisor) / nDivisor;
        }
    }

    nRareBase = std::max(nRareBase, pItemRatioTxtRecord->dwRareMin);

    const int32_t nRareChance = nRareBase - nRareBase * tcArray[nCounter].nRare / 1024;
    if (nRareChance <= 0 || (uint32_t)ITEMS_RollLimitedRandomNumber(&pMonster->pSeed, nRareChance) < 128)
    {
        nItemQuality = ITEMQUAL_RARE;
    }
}


if (pItemTypesTxtRecord->nMagic)
{
    nItemQuality = ITEMQUAL_MAGIC;
}
else
{
    int32_t nMagicBase = (pItemRatioTxtRecord->dwMagic - nLevelDiff / pItemRatioTxtRecord->dwMagicDivisor) << 7;
    if (nMagicBonus != 0)
    {
        nMagicBase = 12800 * (pItemRatioTxtRecord->dwMagic - nLevelDiff / pItemRatioTxtRecord->dwMagicDivisor) / nMagicDivisor;
    }

    nMagicBase = std::max(nMagicBase, pItemRatioTxtRecord->dwMagicMin);

    const int32_t nMagicChance = nMagicBase - nMagicBase * tcArray[nCounter].nMagic / 1024;
    if (nMagicChance <= 0 || ITEMS_RollLimitedRandomNumber(&pMonster->pSeed, nMagicChance) < 128)
    {
        nItemQuality = ITEMQUAL_MAGIC;
    }
}
